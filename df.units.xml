<data-definition>
    <bitfield-type type-name='unit_flags1' base-type='uint32_t'>
        <flag-bit name='move_state'
                  comment='Can the dwarf move or are they waiting for their movement timer'/>
        <flag-bit name='dead'
                  comment='Dead (might also be set for incoming/leaving critters that are alive)'/>
        <flag-bit name='has_mood' comment='Currently in mood'/>
        <flag-bit name='had_mood' comment='Had a mood already'/>

        <flag-bit name='marauder' comment='wide class of invader/inside creature attackers'/>
        <flag-bit name='drowning' comment='Is currently drowning'/>
        <flag-bit name='merchant' comment='An active merchant'/>
        <flag-bit name='forest'
                  comment='used for units no longer linked to merchant/diplomacy, they just try to leave mostly'/>

        <flag-bit name='left' comment='left the map'/>
        <flag-bit name='rider' comment='Is riding an another creature'/>
        <flag-bit name='incoming'/>
        <flag-bit name='diplomat'/>

        <flag-bit name='zombie'/>
        <flag-bit name='skeleton'/>
        <flag-bit name='can_swap' comment='Can swap tiles during movement (prevents multiple swaps)'/>
        <flag-bit name='on_ground' comment='The creature is laying on the floor, can be conscious'/>

        <flag-bit name='projectile' comment='Launched into the air? Funny.'/>
        <flag-bit name='active_invader' comment='Active invader (for organized ones)'/>
        <flag-bit name='hidden_in_ambush'/>
        <flag-bit name='invader_origin' comment='Invader origin (could be inactive and fleeing)'/>

        <flag-bit name='coward' comment='Will flee if invasion turns around'/>
        <flag-bit name='hidden_ambusher' comment='Active marauder/invader moving inward?'/>
        <flag-bit name='invades' comment='Marauder resident/invader moving in all the way'/>
        <flag-bit name='check_flows' comment='Check against flows next time you get a chance'/>

        <flag-bit name='ridden'/>
        <flag-bit name='caged'/>
        <flag-bit name='tame'/>
        <flag-bit name='chained'/>

        <flag-bit name='royal_guard'/>
        <flag-bit name='fortress_guard'/>
        <flag-bit name='suppress_wield'/>
        <flag-bit name='important_historical_figure' comment='Is an important historical figure'/>
    </bitfield-type>

    <bitfield-type type-name='unit_flags2' base-type='uint32_t'>
        <flag-bit name='swimming'/>
        <flag-bit name='sparring'/>
        <flag-bit name='no_notify' comment='Do not notify about level gains (for embark etc)'/>
        <flag-bit name='unused' comment='Has its own allocated copy of body_info, rather than a direct pointer to the creature raws'/>

        <flag-bit name='calculated_nerves'/>
        <flag-bit name='calculated_bodyparts'/>
        <flag-bit name='important_historical_figure'
                  comment='Is important historical figure (slight variation)'/>
        <flag-bit name='killed'
                  comment='Has been killed by kill function (slightly different from dead, not necessarily violent death)'/>

        <flag-bit name='cleanup_1' comment='Must be forgotten by forget function (just cleanup)'/>
        <flag-bit name='cleanup_2' comment='Must be deleted (cleanup)'/>
        <flag-bit name='cleanup_3' comment='Recently forgotten (cleanup)'/>
        <flag-bit name='for_trade' comment='Offered for trade'/>

        <flag-bit name='trade_resolved'/>
        <flag-bit name='has_breaks'/>
        <flag-bit name='gutted'/>
        <flag-bit name='circulatory_spray'/>

        <flag-bit name='locked_in_for_trading'
                  comment="Locked in for trading (it's a projectile on the other set of flags, might be what the flying was)"/>
        <flag-bit name='slaughter' comment='marked for slaughter'/>
        <flag-bit name='underworld' comment='Underworld creature'/>
        <flag-bit name='resident' comment='Current resident'/>

        <flag-bit name='cleanup_4'
                  comment='Marked for special cleanup as unused load from unit block on disk'/>
        <flag-bit name='calculated_insulation' comment='Insulation from clothing calculated'/>
        <flag-bit name='visitor_uninvited' comment='Uninvited guest'/>
        <flag-bit name='visitor'/>

        <flag-bit name='calculated_inventory' comment='Inventory order calculated'/>
        <flag-bit name='vision_good' comment='Vision -- have good part'/>
        <flag-bit name='vision_damaged' comment='Vision -- have damaged part'/>
        <flag-bit name='vision_missing' comment='Vision -- have missing part'/>

        <flag-bit name='breathing_good' comment='Breathing -- have good part'/>
        <flag-bit name='breathing_problem' comment='Breathing -- having a problem'/>
        <flag-bit name='roaming_wilderness_population_source'/>
        <flag-bit name='roaming_wilderness_population_source_not_a_map_feature'/>
    </bitfield-type>

    <enum-type type-name='mood_type' base-type='int16_t'>
        <enum-item name='None' value='-1'/>
        <enum-item name='Fey'/>
        <enum-item name='Secretive'/>
        <enum-item name='Possessed'/>
        <enum-item name='Macabre'/>
        <enum-item name='Fell'/>
        <enum-item name='Melancholy'/>
        <enum-item name='Raving'/>
        <enum-item name='Berserk'/>
        <enum-item name='Baby'/>
    </enum-type>

    <enum-type type-name='skill_rating' base-type='int16_t'>
        <enum-attr name='xp_threshold' type-name='uint32_t'/>
        <enum-attr name='caption'/>

        <enum-item name='Dabbling'>
            <item-attr name='xp_threshold' value='500'/>
            <item-attr name='caption' value='Dabbling'/>
        </enum-item>
        <enum-item name='Novice'>
            <item-attr name='xp_threshold' value='600'/>
            <item-attr name='caption' value='Novice'/>
        </enum-item>
        <enum-item name='Adequate'>
            <item-attr name='xp_threshold' value='700'/>
            <item-attr name='caption' value='Adequate'/>
        </enum-item>
        <enum-item name='Competent'>
            <item-attr name='xp_threshold' value='800'/>
            <item-attr name='caption' value='Competent'/>
        </enum-item>
        <enum-item name='Skilled'>
            <item-attr name='xp_threshold' value='900'/>
            <item-attr name='caption' value='Skilled'/>
        </enum-item>
        <enum-item name='Proficient'>
            <item-attr name='xp_threshold' value='1000'/>
            <item-attr name='caption' value='Proficient'/>
        </enum-item>
        <enum-item name='Talented'>
            <item-attr name='xp_threshold' value='1100'/>
            <item-attr name='caption' value='Talented'/>
        </enum-item>
        <enum-item name='Adept'>
            <item-attr name='xp_threshold' value='1200'/>
            <item-attr name='caption' value='Adept'/>
        </enum-item>
        <enum-item name='Expert'>
            <item-attr name='xp_threshold' value='1300'/>
            <item-attr name='caption' value='Expert'/>
        </enum-item>
        <enum-item name='Professional'>
            <item-attr name='xp_threshold' value='1400'/>
            <item-attr name='caption' value='Professional'/>
        </enum-item>
        <enum-item name='Accomplished'>
            <item-attr name='xp_threshold' value='1500'/>
            <item-attr name='caption' value='Accomplished'/>
        </enum-item>
        <enum-item name='Great'>
            <item-attr name='xp_threshold' value='1600'/>
            <item-attr name='caption' value='Great'/>
        </enum-item>
        <enum-item name='Master'>
            <item-attr name='xp_threshold' value='1700'/>
            <item-attr name='caption' value='Master'/>
        </enum-item>
        <enum-item name='HighMaster'>
            <item-attr name='xp_threshold' value='1800'/>
            <item-attr name='caption' value='High Master'/>
        </enum-item>
        <enum-item name='GrandMaster'>
            <item-attr name='xp_threshold' value='1900'/>
            <item-attr name='caption' value='Grand Master'/>
        </enum-item>
        <enum-item name='Legendary'>
            <item-attr name='xp_threshold' value='2000'/>
            <item-attr name='caption' value='Legendary'/>
        </enum-item>
        <enum-item name='Legendary1'>
            <item-attr name='xp_threshold' value='2100'/>
            <item-attr name='caption' value='Legendary+1'/>
        </enum-item>
        <enum-item name='Legendary2'>
            <item-attr name='xp_threshold' value='2200'/>
            <item-attr name='caption' value='Legendary+2'/>
        </enum-item>
        <enum-item name='Legendary3'>
            <item-attr name='xp_threshold' value='2300'/>
            <item-attr name='caption' value='Legendary+3'/>
        </enum-item>
        <enum-item name='Legendary4'>
            <item-attr name='xp_threshold' value='2400'/>
            <item-attr name='caption' value='Legendary+4'/>
        </enum-item>
        <enum-item name='Legendary5'>
            <item-attr name='caption' value='Legendary+5'/>
        </enum-item>
    </enum-type>

    <enum-type type-name='unit_relationship_type' base-type='int16_t' comment='Used in unit.relations'>
        <enum-item name='Pet'/>
        <enum-item name='Spouse'/>
        <enum-item name='Mother'/>
        <enum-item name='Father'/>
        <enum-item name='LastAttacker'/>
        <enum-item name='GroupLeader'/>
        <enum-item name='Dragee'/>
        <enum-item name='Dragger'/>
        <enum-item name='RiderMount'/>
        <enum-item name='unk9'/>
        <enum-item name='Sibling'/>
        <enum-item name='Child'/>
        <enum-item name='Friend'/>
    </enum-type>

    <struct-type type-name='unit' key-field='id' instance-vector='$global.world.units.all'>
        <compound type-name='language_name' name='name'/>

        <code-helper name='describe'>
            (describe-obj $.name)
            (awhen (find-creature $.race)
              (fmt "(~A)" $it.creature_id))
        </code-helper>

        <stl-string name='custom_profession'/>

        <enum base-type='int32_t' name='profession' type-name='profession'/>
        <enum base-type='int32_t' name='profession2' type-name='profession'/>
        <int32_t name='race' ref-target='creature_raw'/>
        <int32_t name='race_matgloss' ref-target='matgloss_wood'/>
        <compound name='pos' type-name='coord32'/>
        <compound name='idle_area' type-name='coord32'>
            <comment>
                E.g. for a dead miner, holds the place where he
                was likely hanging around when he got the command
                to mine in an aquifer.
            </comment>
        </compound>
        <int32_t name='idle_area_threshold'/>
        <int32_t name='follow_distance'/>

        <compound name='path'>
            <compound name='dest' type-name='coord32'/>
            <compound name='path' type-name='coord32_path'/>
        </compound>

        <compound name='flags1' type-name='unit_flags1'/>
        <compound name='flags2' type-name='unit_flags2'/>

        <compound name='meeting'>
            <enum name='state' base-type='int8_t'>
                <enum-item name="SelectNoble" value="0"/>
                <enum-item name="FollowNoble" value="1"/>
                <enum-item name="DoMeeting" value="2"/>
                <enum-item name="LeaveMap" value="3"/>
            </enum>
            <enum name='target_profession' type-name='profession' base-type='int16_t'/>
        </compound>

        <int8_t name='sex'/>
        <int32_t name='id'/>
        <int16_t name='idle_location_type'/>
        <int32_t name='schedule_id' ref-target='schedule_info'/>
        <int32_t name='civ_id' ref-target='historical_entity'/>

        <compound name='patrol_route' type-name='coord32_path'/>
        <int32_t name='patrol_index'/>

        <stl-vector name='specific_refs' pointer-type='specific_ref'/>
        <stl-vector name='general_refs' pointer-type='general_ref'/>

        <compound name='military'>
            <compound type-name='language_name' name='name'/>
            <int8_t name='rations'/>
            <int8_t name='sleep_mode' comment='0=ground, 1=barracks, 2=room'/>
            <bitfield name='flags' base-type='uint32_t'>
                <flag-bit name='pickup_food'/>
                <flag-bit name='carry_water'/>
                <flag-bit name='hold_ground'/>
                <flag-bit name='attack_animals'/>
                <flag-bit name='stand_down'/>
            </bitfield>
            <int32_t name='patrol_timer'/>
            <int32_t name='patrol_cooldown'/>
            <compound name='station_pos' type-name='coord'/>
            <int32_t name='pickup_food_cooldown'/>
        </compound>

        <compound name='animal'>
            <int16_t name='population'/>
            <int32_t name='leave_countdown'
                      comment='once 0, it heads for the edge and leaves'/>
            <int32_t name='vanish_countdown' comment='once 0, it collapses and dies'/>
        </compound>

        <enum type-name='mood_type' name='mood'/>

        <int16_t name='mood_claimedWorkshop'/>
        <compound name='relations'>
            <int32_t name='pregnancy_timer'/>
            <int32_t name='age_seconds'/>
            <int32_t name='age_years'/>
            <int32_t name='age_death'/>
            <pointer type-name='unit' name='following'/>

            This should be a static-array, size 9, with index-enum unit_relationship_type; will likely need to fix plugins and scripts
            <int32_t name='pet_owner_id' ref-target='unit'/>
            <int32_t name='spouse_id' ref-target='unit'/>
            <int32_t name='mother_id' ref-target='unit'/>
            <int32_t name='father_id' ref-target='unit'/>
            <int32_t name='last_attacker_id' ref-target='unit'/>
            <int32_t name='group_leader_id' ref-target='unit'
                     comment='used by goblins, adv mode companions etc'/>
            <int32_t name='draggee_id' ref-target='unit'
                     comment='unit being dragged by this one'/>
            <int32_t name='dragger_id' ref-target='unit'
                     comment='unit that drags this one'/>
            <int32_t name='rider_mount_id' ref-target='unit'/>
        </compound>
        <int16_t name='mount_type'/>
        <int16_t name='killer_profession'/>
        <stl-vector name='inventory' pointer-type='unit_inventory_item'/>
        <stl-vector name='owned_items'>
            <int32_t ref-target='item'/>
        </stl-vector>
        <stl-vector name='traded_items' comment='items brought to trade depot'>
            <int32_t ref-target='item'/>
        </stl-vector>
        <stl-vector name='owned_artifacts' pointer-type='artifact_record'/>
        <stl-vector name='owned_buildings' pointer-type='building'/>
        <stl-vector name='corpse_items'>
            <int32_t ref-target='item'/>
        </stl-vector>
        <compound name='job'>
            <int32_t name='account'/>
            <int32_t name='satisfaction'/>
            <pointer type-name='unit' name='hunt_target'/>
            <pointer type-name='building' name='destroy_target'/>
            <compound name='last_attack_dir' type-name='coord32' comment='Z never used'/>
            <int16_t name='siege_morale'/>
            <int16_t name='morale_recovery_timer'/>
            <pointer comment='df_job' name='current_job' type-name='job'/>
            <stl-vector name='mood_item_type'>
                <enum base-type='int32_t' type-name='item_type'/>
            </stl-vector>
            <stl-vector name='mood_item_subtype'>
                <int32_t refers-to='(item-subtype-target $$._parent._parent.mood_item_type[$$._key] $)'/>
            </stl-vector>
            <stl-vector name='mood_material'>
                <enum base-type='int32_t' type-name='material_type'/>
            </stl-vector>
            <stl-vector name='mood_matgloss'>
                <int32_t refers-to='(matgloss-target $$._parent._parent.mood_material[$$._key] $)'/>
            </stl-vector>
            <enum base-type='int32_t' name="mood_skill" type-name='job_skill'/>
            <int32_t comment='in advmode, lets non-player unit have job_counter update if nonzero'/>
            <int32_t name='mood_timeout' comment='insanity upon reaching zero'/>
        </compound>

        <compound name='body'>
            <stl-vector name='wounds' type-name='int16_t'/>
            <stl-vector name='flags' type-name='int32_t' comment='1=burning'/>
            <stl-vector name='nerves' type-name='int8_t'/>
            <stl-vector name='bodyparts' type-name='int8_t'/>
            <stl-vector name='insulation' type-name='int16_t'/>
            <pointer name='body_plan' type-name='body_info'/>

            <int16_t name='weapon_hand_bp'/>
            <int32_t name='size'/>
            <int32_t name='blood_total'/>
            <int32_t name='blood_remaining'/>
            <int32_t name='bleed_rate'/>
        </compound>

        <compound name='counters'>
            <int32_t name='fame_level' comment='influences counterattacks and limits hired companions'/>
            <int32_t name='think_counter'/>
            <int32_t name='job_counter'/>
            <int32_t name='swap_counter'/>
            <enum base-type='int16_t' name='death_cause' type-name='death_type' comment='used when thrown as a projectile'/>
            <int16_t name='nausea'/>
            <int16_t name='winded'/>
            <int16_t name='stunned'/>
            <int16_t name='unconscious'/>
            <int16_t/>
            <int16_t name='webbed'/>
            <int16_t name='paralysis'/>
            <compound name='guts_trail1' type-name='coord'/>
            <compound name='guts_trail2' type-name='coord'/>
            <int16_t name='soldier_mood_countdown'/>
            <enum name='soldier_mood' base-type='int16_t'>
                <enum-item name='None' value='-1'/>
                <enum-item name='MartialTrance'/>
                <enum-item name='Enranged'/>
                <enum-item name='Tantrum'/>
            </enum>
            <int32_t name='pain'/>
            <int32_t name='exhaustion'/>
            <int32_t name='hunger_timer'/>
            <int32_t name='thirst_timer'/>
            <int32_t name='sleepiness_timer'/>
            <int32_t name='stomach_content'/>
        </compound>

        <stl-vector name='contaminants' pointer-type='unit_contaminant'/>
        <compound name='status'>
            <stl-vector name='misc_traits' pointer-type='unit_misc_trait'/>

            <int32_t name='demand_timeout' init-value='1000'/>
            <int32_t name='mandate_timeout' init-value='1000'/>
            <int8_t name='wagon_facing'/>

            <compound type-name='language_name' name='artifact_name'/>
            <int32_t name='strength'/>
            <int32_t name='agility'/>
            <int32_t name='toughness'/>
            <stl-vector name='skills' pointer-type='unit_skill'/>
            <stl-vector name='preferences' pointer-type='unit_preference'/>
            <stl-vector name='demands' pointer-type='unit_demand'/>

            <static-array type-name='int8_t' name='labors' index-enum='unit_labor' count='91'/>

            <int32_t name='total_exp'/> for attribute boosts
            <stl-vector name='wrestle_items' pointer-type='unit_item_wrestle'/>

            <stl-vector name='observed_traps'>
                <int32_t ref-target='building'/>
            </stl-vector>

            <stl-vector name='recent_events' pointer-type='unit_thought'/>
            <stl-vector name='recent_dreams' pointer-type='unit_thought'/>

            <int32_t name='happiness'/>
            <int16_t name='insanity_chance'/>

            <stl-vector name='complaints' pointer-type='unit_complaint'/>
            <stl-vector name='requests' pointer-type='unit_request'/>
            <stl-vector name='acquaintances' pointer-type='unit_acquaintance'/>
            <stl-vector name='coin_debts' pointer-type='unit_coin_debt'/>

            <int16_t name='adv_sleep_timer' comment='and some other things'/>
            <compound type-name='coord32'/>
            <compound type-name='coord32_path'/>
        </compound>

        <int32_t name='hist_figure_id' ref-target='historical_figure'/>
        <compound name='status2'>
            <int16_t name='limbs_stand_max'/>
            <int16_t name='limbs_stand_count'/>
            <int32_t name='able_breathe'/>
            <int16_t name='limbs_grasp_max'/>
            <int16_t name='limbs_grasp_count'/>
            <int16_t name='limbs_fly_max'/>
            <int16_t name='limbs_fly_count'/>
            <int32_t name='specialattack_cooldown'/>
            <stl-vector name='body_part_temperature' pointer-type='temperaturest'/>
            <int32_t name='enemy_status_slot'/>
            <int32_t name='last_temp_update'/>
        </compound>
    </struct-type>

    <struct-type type-name='unit_inventory_item'>
        <pointer name='item' type-name='item'/>

        <code-helper name='describe'>$.mode (describe-obj $.item)</code-helper>

        <enum base-type='int16_t' name='mode'>
            <enum-item name='Hauled'/>
            <enum-item name='Weapon' comment='also shield'/>
            <enum-item name='Worn' comment='Body'/>
            <enum-item name='Old_Neck'/>
            <enum-item name='Old_Head'/>
            <enum-item name='Old_Finger'/>
            <enum-item name='Piercing' comment='Ear'/>
            <enum-item name='Old_Wrist'/>
            <enum-item name='Old_Feet'/>
            <enum-item name='Old_Hands'/>
            <enum-item name='Old_Legs'/>
            <enum-item name='Old_Body'/>
            <enum-item name='Old_Body2'/>
            <enum-item name='Old_Back'/>
            <enum-item name='Flask' comment='Belt'/>
            <enum-item name='StuckIn'/>
            <enum-item name='InMouth' comment='Mouth'/>
            <enum-item name='Pet' comment='pet vermin'/>
        </enum>

        <int16_t name='body_part_id'
                 refers-to='$$._global._parent._global.body.body_plan.body_parts[$]'/>

        <int32_t name='pet_seed' comment='simple RNG seed to determine LeftShoulder/RightShoulder/Head for vermin'/>
    </struct-type>

    <struct-type type-name='unit_contaminant'>
        <compound type-name='contaminant' name='contaminant'/>
        <int16_t name='body_part_id'
                 refers-to='$$._global._parent._global.body.body_plan.body_parts[$]'/>
        <int16_t name="unk_16"/>
    </struct-type>

    <enum-type base-type='int16_t' type-name='misc_trait_type'>
        <enum-item name='RequestWaterCooldown'/> for thirsty patients
        <enum-item name='RequestFoodCooldown'/> for hungry patients
        <enum-item name='RequestRescueCooldown'/>
        <enum-item name='GetDrinkCooldown'/>
        <enum-item name='GetFoodCooldown'/>
        <enum-item name='Migrant'/>
        <enum-item name='RoomComplaint'/>
        <enum-item name='ResidentCreature' comment='upon reaching zero, it gets a name'/>
        <enum-item name='RentBedroomCooldown'/>
        <enum-item name='ClaimTrinketCooldown'/>
        <enum-item name='ClaimClothingCooldown'/>
        <enum-item name='WantsDrink' comment='ALCOHOLIC'/>
        <enum-item name='LikesOutdoors' comment='MOUNTAIN'/>
        <enum-item name='Hardened' comment='COMBATHARDNESS'/>
        <enum-item name='TimeSinceBreak' comment='TIME_SINCE_BREAK'/>
        <enum-item name='OnBreak' comment='ON_BREAK'/>
        <enum-item name='PrepareToDie'/>
        <enum-item name='CaveAdapt' comment='CAVE_ADAPT'/>
    </enum-type>

    <struct-type type-name='unit_misc_trait'>
        <enum base-type='int16_t' type-name='misc_trait_type' name='id'/>

        <code-helper name='describe'>(fmt "id=~A value=~A" $.id $.value)</code-helper>

        <int32_t name='value'/>
    </struct-type>

    <struct-type type-name='unit_acquaintance'>
        <int32_t name='unit_id' ref-target='unit'/>
        <int32_t name='strength' comment='>= 30 -> long-term'/>
        <int32_t name='timer' comment='+1 per 10 frames; limit at 1 year'/>
        <bitfield name='flags'>
            <flag-bit name='is_friend'/>
        </bitfield>
    </struct-type>

    <struct-type type-name='unit_thought'>
        <enum base-type='int16_t' name='type' type-name='unit_thought_type'/>
        <int32_t name="age" comment='+1 per frame'/>
        <int16_t name="subtype" init-value='-1'/>
        <int32_t name="severity"/>
    </struct-type>

    <struct-type type-name='unit_item_wrestle'>
        <int32_t name="unit" ref-target='unit'/>
        <int32_t name="self_bp"
                 refers-to='$$._parent._upglobal.body.body_plan.body_parts[$]'/>
        <int32_t name="other_bp"
                 refers-to='$$._parent.unit.ref-target.body.body_plan.body_parts[$]'/>
        <int32_t name="self_bp2" init-value='-1'/>
        <int32_t name="other_bp2" init-value='-1'/>
        <int32_t name='item1' ref-target='item'/>
        <int32_t name='item2' ref-target='item'/>
        <int32_t name="type"/>
        <int8_t name="direction" comment='1 grabs, -1 grabbed'/>
    </struct-type>

    <struct-type type-name='unit_skill'>
        <enum base-type='int16_t' name="id" type-name='job_skill'/>

        <code-helper name='describe'>$.id</code-helper>

        <enum base-type='int16_t' name="rating" type-name='skill_rating'/>
        <uint32_t name="experience"/>
    </struct-type>

    <struct-type type-name='unit_preference'>
        <enum base-type='int16_t' name="type">
            <enum-item name='LikeMaterial'/>
            <enum-item name='LikeCreature'/>
            <enum-item name='LikeFood'/>
            <enum-item name='HateCreature'/>
            <enum-item name='LikeItem'/>
            <enum-item name='LikePlant'/>
            <enum-item name='LikeTree'/>
            <enum-item name='LikeColor'/>
            <enum-item name='LikeShape'/>
        </enum>

        <code-helper name='describe'>$.type</code-helper>

        <compound is-union='true'>
            <enum base-type='int16_t' name="item_type" type-name='item_type'/>
            <int16_t name='creature_id' ref-target='creature_raw'/>
            <int16_t name='color_id' ref-target='descriptor_color'/>
            <int16_t name='shape_id' ref-target='descriptor_shape'/>
            <int16_t name='plant_id' ref-target='matgloss_plant'/>
            <int16_t name='wood_id' ref-target='matgloss_wood'/>
        </compound>
        <int16_t name="item_subtype" refers-to='(item-subtype-target $$._parent.item_type $)'/>
        <enum base-type='int16_t' name='material' type-name='material_type'/>
        <int16_t name='matgloss' refers-to='(matgloss-target $$._parent.material $)'/>

        <bool name='active'/>
        <int32_t name='prefstring_seed' comment='feeds into a simple RNG to choose which prefstring to use'/>
    </struct-type>

    <struct-type type-name='unit_complaint'>
        <enum base-type='int16_t' name="type">
            <enum-item name='SelfUnemployed'/>
            <enum-item name='GuildUnemployed'/>
            <enum-item name='NeedWeapons'/>
        </enum>
        <enum base-type='int16_t' type-name='guild_id' name="guild"/>
        <int32_t name='age'/>
    </struct-type>

    <struct-type type-name='unit_request'>
        <enum base-type='int16_t' name="type">
            <enum-item name='DoGuildJobs'/>
            <enum-item name='MakeWeapons'/>
        </enum>
        <enum base-type='int16_t' type-name='guild_id' name="guild"/>
        <int16_t name='count'/>
    </struct-type>

    <struct-type type-name='unit_coin_debt'>
        <int32_t name='recipient' ref-target='unit'/>
        <int32_t name='amount'/>
    </struct-type>

    <struct-type type-name='unit_chunk'
                 instance-vector='$global.world.unit_chunks' key-field='id'>
        <int32_t name='id' comment='unit_*.dat'/>
        <static-array name='units' count='100'>
            <stl-vector name='items' pointer-type='item'/>
            <pointer name='unit' type-name='unit'/>
        </static-array>
    </struct-type>

</data-definition>

<!--
Local Variables:
indent-tabs-mode: nil
nxml-child-indent: 4
End:
-->
